spring下载地址(3.x最后版本)：
http://repo.springsource.org/libs-release-local/org/springframework/spring/3.2.9.RELEASE/spring-framework-3.2.9.RELEASE-dist.zip

一、spring上下文

	spring自带了几种类型的上下文：
		ClassPathXmlApplicationContext —— 从类路径下的xml配置文件中加载上下文定义，把应用上下文定义文件当做类资源。
		FileSystemXmlApplicationContext —— 读取文件系统下的xml配置文件并加载上下文定义。
		XmlWebApplicationContext —— 读取web应用下的xml配置文件并装载上下文定义。
	
二、spring xml配置的10个命名空间

	aop ： 为声明切面以及将@AspectJ注解的类代理为spring切面提供了配置元素
	beans ： 支持声明和装配Bean，是spring最核心也是最原始的命名空间
	context ： 为配置spring上下文提供了配置元素，包括自动检测和自动装配Bean、注入非spring直接管理的对象
	jee ： 提供了与Java EE API的集成，如JNDI、EJB
	jms ： 为声明消息驱动的POJO提供了配置元素
	lang ： 支持配置由Groovy、JRuby、BeanShell等脚本实现的Bean
	mvc ： 启动springMVC的能力，例如面向注解的控制器、视图控制器和拦截器
	oxm ： 支持spring的对象到xml映射配置
	tx ： 提供声明式事务配置
	util ： 提供各种各样的工具类元素，包括把集合配置为Bean、支持属性占位符元素
	
三、Bean的作用域

	<bean id="duke" class="com.gavin.Juggler" scope="singleton"/>
	
	singleton ： （默认）在每一个spring容器中，一个Bean定义只有一个对象实例
	prototype ： 允许Bean的定义可以被实例化任意次（每次调用都创建一个实例）
	request ： 在一次HTTP请求中，每个Bean定义对应一个实例。该作用域仅在基于Web的spring上下文（如springMVC）中才有效
	session ： 在一个HTTP Session中，每个Bean定义对应一个实例。该作用域仅在基于Web的spring上下文（如springMVC）中才有效
	global-session ： 在一个全局HTTP Session中，每个Bean定义对应一个实例。该作用域仅在基于Web的Portlet上下文中才有效
	
	注意：spring的单例Bean只能保证在每个应用上下文中只有一个Bean的实例。没有人可以阻止你使用传统的方法实例化同一个Bean，或者你甚至可以定义几个<bean>声明来实例化同一个Bean。

四、初始化和销毁Bean

	当实例化一个Bean时，可能需要执行一些初始化操作来确保该Bean处于可用状态。同样地当不再需要Bean，将其从容器中移除时，我们可能还需要按顺序执行一些清除工作。
	为了满足初始化和销毁Bean的需求，Spring提供了Bean生命周期的钩子方法。
	
	<!-- Bean的初始化和销毁 -->
	<bean id="auditorium" class="com.gavin.bean.Auditorium" init-method="trunOnLights" destroy-method="trunOffLights"/>
	
	init-method 指定了在初始化Bean时要调用的方法，destroy-method 指定了Bean从容器中移除前要调用的方法。
	
	也可以实现spring的 InitializingBean 和 DisposableBean 接口参与到Bean的生命周期，重写 afterPropertiesSet() 方法、destory() 方法。
	好处：spring可以自动检测实现了这些接口的Bean，无需额外的配置。
	缺点：Bean与spring的API产生了耦合。
	使用场景：开发一个明确在spring容器内使用的框架Bean。
	
	默认的 init-method 和 destroy-method :
	如果在上下文中定义的很多Bean都拥有相同名字的初始化方法和销毁方法，没必要为每一个Bean配置这两个方法，可以使用 <beans> 的 default-init-method 和 default-destory-method 属性。
	
	<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	   		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd"
	   		default-init-method="trunOnLights"
	   		default-destroy-method="trunOffLights">
	   		
五、装配Bean

	装配的种类：
	1、构造器装配
	2、setter方法装配（property属性）
	
	装配的方法：
	1、注入内部Bean
	2、使用命名空间p简化装配：
		引入p命名空间：xmlns:p="http://www.springframework.org/schema/p"
		优点：配置更简洁
	3、装配集合：Java自带了多种集合类，spring也提供了相应的集合配置元素。
	
		<list> : 装配list类型的值，允许重复
		<set> ： 装配set类型的值，不允许重复
		<map> ： 装配map类型的值，名称和值可以是任意类型
		<props> ： 装配properties类型的值，名称和值必须都是String
	   	
	   	注意：无论是<list>还是<set>都可以用来装配类型为java.util.Collection的任意实现或者数组的属性。
	   	不能因为属性为java.util.Set类型，就表示用户必须使用<set>元素来完成装配。
	   	使用<set>元素配置java.util.List类型的属性，虽然看起来有点怪怪的，但是这的确是可以的。
	   	如果真这样做的话，就需要确保List中的每一个成员都必须是唯一的。
	   	
	   	<map>中<entry>元素由一个键和一个值组成，键和值可以是简单类型，也可以是其他Bean的引用。<entry>的属性：
	   	
	   	key ： 指定map中entry的键为String
	   	key-ref ： 指定map中entry的键为spring上下文中其他Bean的引用
	   	value ： 指定map中entry的键为String
	   	value-ref ： 指定map中entry的键为spring上下文中其他Bean的引用
	4、装配空值：
		<property name="someNullProperty"><null/></property>
		使用场景：有些Bean会为它的属性默认设置一个非空值，如果因为某些特殊原因，我们需要把属性设置为null值；
			   另一个理由是覆盖自动装配的值。
			   
六、使用表达式（SpEL）装配Bean

	