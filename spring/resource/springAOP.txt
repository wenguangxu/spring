依赖的Jar包：
	aopalliance.jar
	aspectjrt.jar
	aspectjweaver.jar

一、横切关注点、面向切面编程

	在软件开发中，分布于应用中多处的功能被称为 横切关注点(cross-cutting concerns)。
	通常，这些横切关注点从概念上是与应用的业务逻辑相分离的(但是往往直接嵌入到应用的业务逻辑之中)。将这些横切关注点与业务逻辑相分离正是面向切面编程(AOP)所要解决的。
	
	依赖注入有利于应用对象之间的解耦，而AOP可以实现 横切关注点 与它们所影响的对象之间的解耦。
	
	横切关注点可以被模块化为特殊的类，这些类被称为 切面。
	这样做的好处：1：每个关注点现在都集中在一处，而不是分散到多处代码中；
			 2：服务模块更简洁，因为它们只包含主要关注点的代码，而次要关注点的代码被转移到切面中了。
			 
二、AOP术语

	通知(Advice) ： 切面的工作被称为通知。通知定义了切面是什么以及何时使用。
	
		spring切面可以应用5种类型的通知：
			
			Before ： 在方法被调用之前调用通知。
			After ： 在方法完成之后调用通知，无论方法执行是否成功。
			After-returning ： 在方法成功执行之后调用通知。
			After-throwing ： 在方法抛出异常后调用通知。
			Around ： 通知包裹了被通知的方法，在被通知方法之前和之后执行自定义的行为。
			
	连接点(Joinpoint) : 连接点是在应用执行过程中能够插入切面的一个点。这个点可以是调用方法时、抛出异常时、甚至修改一个字段时。
				切面代码可以利用这些点插入到应用的正常流程之中，并添加新的行为。
				
	切点(Pointcut) ： 切点定义了 “何处” ，切点的定义会匹配通知所要织入的一个或多个连接点。
	
	切面(Aspect) ： 切面是通知和切点的结合。通知和切点共同定义了关于切面的全部内容——它是什么，在何时和何处完成其功能。
	
	引入(Introduction) ： 引入允许我们向现有的类添加新方法或属性。
	
	织入(Weaving) : 织入是将切面应用到目标对象来创建新的代理对象的过程。切面在指定的连接点被织入到目标对象中。在目标对象的生命周期里有多个点可以进行织入。
		
		编译期————切面在目标类编译时被织入。这种方式需要特殊的编译器。AspectJ 的织入编译器就是以这种方式织入切面的。
		类加载期————切面在目标类加载到JVM时被织入。这种方式需要特殊的类加载器(ClassLoader)，它可以在目标类被引入应用之前增强该目标类的字节码。AspectJ的LTW(load-time weaving)就支持以这种方式织入切面。
		运行期————切面在应用运行的某个时刻被织入。一般情况下，在织入切面时，AOP容器会为目标对象动态地创建一个代理对象。SpringAOP就是以这种方式织入切面的。
		
三、Spring对AOP的支持

	Spring提供了4种各具特色的AOP支持：
		
		基于代理的经典AOP。
		@AspectJ注解驱动的切面。
		纯POJO切面。
		注入式AspectJ切面(适合Spring各版本)。
		
	1、Spring AOP框架的一些关键点：
	
		Spring通知是Java编写的。
		Spring在运行期通知对象。
		Spring只支持方法连接点。
		
	2、编写切点
	
		在Spring AOP中，需要使用AspectJ的切点表达式语言来定义切点。
		
		Spring AOP所支持的AspectJ切点指示器：
		
			arg() : 限制连接点匹配参数为指定类型的执行方法。
			@args() : 限制连接点匹配参数由指定注解标注的执行方法。
			execution() : 用于匹配是连接点的执行方法。
			this() : 限制连接点匹配AOP代理的Bean引用为指定类型的类。
			target() : 限制连接点匹配目标对象为指定类型的类。
			@target() : 限制连接点匹配特定的执行对象，这些对象对应的类要具备指定类型的注解。
			within() : 限制连接点匹配指定的类型。
			@within() : 限制连接点匹配指定注解所标注的类型(当使用SpringAOP时，方法定义在由指定的注解所标注的类里)。
			@annotation() : 限制匹配带有指定注解连接点。
			bean() ： 使用Bean ID或Bean name作为参数来限制切点只匹配特定的Bean。
			
			注意：只有execution指示器是唯一的执行匹配，其他的都是用于限制匹配的。这说明execution指示器是我们在编写切点定义时最主要使用的指示器。在此基础上，我们使用其他指示器来限制所匹配的切点。
			
		当Instrument的play()方法执行时会触发通知：
			execution(* com.gavin.interfaces.Instrument.play(..))
			
		仅匹配 com.gavin 包：
			execution(* com.gavin.interfaces.Instrument.play(..))
				&& within(com.gavin.*)
				
		可以使用：and or not
		
		在执行Instrument的play方法时应用通知，但限定Bean的ID或name为eddie ：
			execution(* com.gavin.interfaces.Instrument.play())
				and bean(eddie)
				
		除了eddie以外的Bean ：
			execution(* com.gavin.interfaces.Instrument.play())
				and !bean(eddie)
				
	3、在XML中声明切面
	
		Spring的AOP配置元素：
		
			<aop:advisor> : 定义AOP通知器。
			<aop:after> : 定义AOP后置通知(不管被通知的方法是否执行成功)。
			<aop:after-returning> : 定义AOP after-returning 通知。
			<aop:after-throwing> : 定义 after-throwing 通知。
			<aop:around> : 定义AOP 环绕通知。
			<aop:aspect> : 定义切面。
			<aop:aspectj-autoproxy> : 启用@aspectJ注解驱动的切面。
			<aop:before> : 定义AOP前置通知。
			<aop:config> : 顶层的AOP配置元素，大多数的<aop:*>元素必须包含在<aop:config>元素内。
			<aop:declare-parents> : 为被通知的对象引入额外的接口，并透明地实现。
			<aop:pointcut> : 定义切点。
			
		环绕通知(需要引入aspectjrt.jar) ： 相对于前置通知和后置通知，环绕通知在这点上有明显的优势。使用环绕通知，可以完成前置后置通知所实现的相同功能，但是只需要在一个方法中实现。
				因为整个通知逻辑是在一个方法内实现的，所以不需要使用成员变量保存状态。
				
	4、为通知传递参数(略)
	5、通过切面引入新功能(略)
	6、注解切面(略)
	7、注入AspectJ切面(比Spring AOP强大；切点更细)(略)